package com.liyang.domain.creditrepayplan;

import java.math.BigDecimal;
import java.util.List;

import com.liyang.domain.loan.Loan;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.jpa.query.expression.generic.SpecificationQueryRepository;
import com.liyang.domain.base.WorkflowEntityRepository;
import com.liyang.domain.creditrepayment.Creditrepayment;
import com.liyang.domain.product.Product;

import org.springframework.data.rest.core.annotation.RestResource;

//@RepositoryRestResource(excerptProjection = UserProjection.class)
public interface CreditrepayplanRepository extends WorkflowEntityRepository<Creditrepayplan>,SpecificationQueryRepository<Creditrepayplan> {
	//根据creditcardId找某张信用卡的所有还款计划列表
	@Query("select r from Creditrepayplan r inner join r.creditcard a where a.id=:creditcardId")
	public Page<Creditrepayplan> getCreditRepayplanByCreditcard(@Param("creditcardId")Integer creditcardId,Pageable pageable);

	//根据LoanId找到某笔贷款的还款计划列表
	@Query("select r from Creditrepayplan r inner join r.loan a where a.id=:loanId")
	public Page<Creditrepayplan> getCreditRepayplanByLoan(@Param("loanId")Integer loanId,Pageable pageable);
	
	@Query("select r from Creditrepayplan r inner join r.loan a where a.id=?1")
	public List<Creditrepayplan> findByLoanId(Integer loanId);
	
	@Query("select r from Creditrepayplan r inner join r.state state where state.stateCode=?1")
	public List<Creditrepayplan> getByStatCode(String stateCode);
	
	@Query("select r from Creditrepayplan r inner join r.state state where state.stateCode=?1 and r.leftAmount > ?2")
	public List<Creditrepayplan> getByStatCodeAndLeftAmountGreaterThan(String stateCode,BigDecimal leftAmount);
	@RestResource(exported = false)
	Creditrepayplan findByPlanSn(String planSN);
	@Query("select r from Creditrepayplan r inner join r.state state where state.stateCode='ACCOUNTED' and r.leftAmount > 0 and r.loanSn=?1")
	public List<Creditrepayplan> getAccountedPlanByLoansn(String  loanSn);
	@Query("select r from Creditrepayplan r inner join r.state state where state.stateCode in ('ACCOUNTED','ACCOUNT') and r.leftAmount > 0 and r.loanSn=?1")
	public List<Creditrepayplan> getAccountedAndAccountPlanByLoansn(String  loanSn);
	@RestResource(exported = false)
	List<Creditrepayplan> findAllByStateInAndLeftAmountIsGreaterThanAndLoan(List<CreditrepayplanState> states,BigDecimal leftAmount,Loan loan);
	
	@Query("select r from Creditrepayplan r join r.loan l join r.state state where l.id=?1 and state.stateCode=?2 and r.leftAmount > ?3")
	public Creditrepayplan findByLoanAndStateCodeAndLeftAmount(Integer loanId, String stateCode, BigDecimal leftAmount);
}