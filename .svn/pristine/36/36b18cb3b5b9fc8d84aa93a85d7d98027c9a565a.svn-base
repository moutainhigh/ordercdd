package com.liyang.controller.domain;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.time.DateFormatUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.jpa.query.expression.QueryExpSpecificationBuilder;
import com.jpa.query.expression.generic.GenericQueryExpSpecification;
import com.liyang.Exception.TimeConditiosException;
import com.liyang.domain.creditrepayment.CreditrepaymentRepository;
import com.liyang.domain.creditrepayplan.Creditrepayplan;
import com.liyang.domain.department.Department;
import com.liyang.domain.department.DepartmentRepository;
import com.liyang.domain.department.Departmenttype.DepartmenttypeCode;
import com.liyang.domain.feebackup.Feebackup;
import com.liyang.domain.loan.Loan;
import com.liyang.domain.loan.LoanRepository;
import com.liyang.domain.loan.LoanUtil;
import com.liyang.domain.ordercdd.Ordercdd;
import com.liyang.domain.ordercdd.OrdercddRepository;
import com.liyang.domain.product.Product;
import com.liyang.domain.user.User;
import com.liyang.domain.user.UserRepository;
import com.liyang.service.CreditrepayplanService;
import com.liyang.util.BeanUtil;
import com.liyang.util.CommonUtil;
import com.liyang.util.FailReturnObject;
import com.liyang.util.ReturnObject.Level;
import com.liyang.util.SearchByTimes;

@RestController
@RequestMapping("/ordercddDomain")
public class OrdercddDomainController {
    @Resource
    private OrdercddRepository repository;
    @Autowired
    HttpServletRequest request;
    @Autowired
    JdbcTemplate jdbcTemplate;
    @Resource
    private DepartmentRepository departmentRepository;
    @Resource
    private LoanRepository loanRepository;
    @Resource
    private CreditrepaymentRepository creditrepaymentRepository;
    @Resource
    private UserRepository userRepository;
    @Resource
    private CreditrepayplanService planService;

    @RequestMapping("/search")
    public EntityPage search(@RequestParam(required = false) Map<String, Object> params) throws TimeConditiosException {
        GenericQueryExpSpecification<Ordercdd> queryExpression = new GenericQueryExpSpecification<Ordercdd>();

        //状态
        queryExpression.add(QueryExpSpecificationBuilder.eq("state.id", params.get("state_id"), true));
        //授权门店
        if (params.get("department_label") != null) {
            queryExpression.add(QueryExpSpecificationBuilder.like("createdByDepartment.label", params.get("department_label").toString(), true));
        }
        //订单名称
        if (params.get("label") != null) {
            queryExpression.add(QueryExpSpecificationBuilder.like("label", params.get("label").toString(), true));
        }
        //手机号
        if (params.get("applyMobile") != null) {
            queryExpression.add(QueryExpSpecificationBuilder.like("applyMobile", params.get("applyMobile").toString(), true));
        }
        //身份证
        if (params.get("applyIdentityNo") != null) {
            queryExpression.add(QueryExpSpecificationBuilder.like("applyIdentityNo", params.get("applyIdentityNo").toString(), true));
        }
        //借款人姓名
        if (params.get("realName") != null) {
            queryExpression.add(QueryExpSpecificationBuilder.like("realName",
                    params.get("realName").toString(), true));
        }
        //订单号
        if (params.get("cddSn") != null) {
            queryExpression.add(QueryExpSpecificationBuilder.like("cddSn",
                    params.get("cddSn").toString(), true));
        }
        //根据推荐码选出
        if (params.get("referralCode") != null) {
            queryExpression.add(QueryExpSpecificationBuilder.eq("referralCode", params.get("referralCode").toString(), true));
        }

        //根据时间查询
        if (params.get("timeRangeKey") != null) {
            SearchByTimes.addTimesConditions(params, queryExpression);
        }


        //业务员
        queryExpression.add(QueryExpSpecificationBuilder.eq("serviceUser.id", params.get("service_user_id"), true));
        limitField(queryExpression);
        Page<Ordercdd> page = repository.findAll(queryExpression, EntityPageUtil.createPageable(params));
        String[] fields = new String[]{"id", "label", "createdAt", "lastModifiedAt", "applyIdentityNo", "state", "realName", "applyMobile", "isDistribution",
                "serviceUser", "product", "createdByDepartment", "cddSn", "applyAmount", "leftMatchAmount", "person"};
        return convertCustom(EntityPageUtil.convert(page, fields));
    }

    private EntityPage convertCustom(EntityPage page) {
        List<Map<String, Object>> entities = page.getEntitys();
        if (entities == null) {
            return page;
        }
//		EntityPage newPage = page.clone();
        for (Map<String, Object> map : entities) {
            if (map == null) {
                continue;
            }

            Object product = map.get("product");
            if (product instanceof Product) {
                Product obj = (Product) product;
                map.put("product_id", obj.getId());
                map.put("product_label", obj.getLabel());
                map.remove("product");
            }
            if ("true".equals(request.getParameter("acts"))) {
                HashMap<String, Object> acts = new HashMap<>();
                acts.put("distribution", queryStateByCodeAndEntityId("distribution", (Integer) map.get("id")));
                acts.put("application", queryStateByCodeAndEntityId("application", (Integer) map.get("id")));
                acts.put("adopt", queryStateByCodeAndEntityId("adopt", (Integer) map.get("id")));
                acts.put("sign", queryStateByCodeAndEntityId("sign", (Integer) map.get("id")));
                acts.put("twoAdopt", queryStateByCodeAndEntityId("twoAdopt", (Integer) map.get("id")));
                map.put("acts", acts);
            }

        }
        return page;
    }

    private Map queryStateByCodeAndEntityId(String stateCode, Integer ordercddId) {
        try {
            return jdbcTemplate.queryForMap(
                    "SELECT `user`.nickname,act.act_code FROM ordercdd_log log LEFT JOIN `user` ON `user`.id = log.created_by LEFT JOIN ordercdd_act act ON log.act_id = act.id WHERE log.entity_id=? AND act.act_code=? ORDER BY log.id DESC LIMIT 1",
                    ordercddId, stateCode);
        } catch (EmptyResultDataAccessException e) {
            return null;
        }
    }

    /**
     * 限制权限，例如：部门、角色等
     */
    private void limitField(GenericQueryExpSpecification<Ordercdd> queryExpression) {
        Integer curDepartmentId = CommonUtil.getCurrentUserDepartment().getId();
        //平台
        Department company = departmentRepository.findByDepartmenttypeCode(DepartmenttypeCode.COMPANY);
        //门店，暂时认为非平台的
        if (curDepartmentId.equals(company.getId())) {//如果登录人部门是平台，只查平台一审和平台二审的
        } else {//查询其他状态的
            queryExpression.add(QueryExpSpecificationBuilder.eq("createdByDepartment.id",
                    curDepartmentId, true));
        }
    }

    /*******************************详情******************************/

    @RequestMapping("/detail")
    public Map<String, Object> detail(@RequestParam Integer ordercddId) {
        if (ordercddId == null) {
            throw new FailReturnObject(1, "ordercddId不能为空", Level.ERROR);
        }
        Ordercdd ordercdd = repository.findOne(ordercddId);
        if (ordercdd == null) {
            throw new FailReturnObject(2, "ordercdd未找到", Level.ERROR);
        }
        Map<String, Object> result = BeanUtil.beanToMap(ordercdd);
        BeanUtil.commonConvert(result, ordercdd);
        result.remove("person");
        result.remove("debtorCreditcard");
        result.remove("loan");
        result.remove("ordercddloans");
        result.remove("vehicle");
        Object product = result.get("product");
        result.remove("product");
        if (product != null) {
            Product obj = (Product) product;
            result.put("debtorInterest", obj.getDebtorInterest());
            result.put("monthDebtorInterest", obj.getDebtorInterest().divide(BigDecimal.valueOf(12), 2, BigDecimal.ROUND_UP));
        }
        //收费项目
        Object feebackups = result.get("feebackups");
        if (feebackups != null) {
            Set<Feebackup> set = (Set<Feebackup>) feebackups;
            for (Feebackup feebackup : set) {
                if (feebackup == null) {
                    continue;
                }
                feebackup.setOrdercdd(null);
                BigDecimal feeRate = feebackup.getFeeRate();
                if (feeRate != null && (feeRate.compareTo(new BigDecimal("0")) > 0)) {//排除零或负值
                    feebackup.setFeeAmount(feeRate.multiply(ordercdd.getApplyAmount()));
                }
            }
            //和实际生成贷款计算的金额保持一致
            LoanUtil util = new LoanUtil();
            BigDecimal interest = util.getDebtorInterest(ordercdd.getApplyAmount(), ordercdd.getProduct().getDebtorInterest());
            Loan tempLoan = util.calculateFeebackup(ordercdd.getApplyAmount(), set, interest, ordercdd.getIsInterestAdvance());
            result.put("oneTimeFee", tempLoan.getOneTimeFee());
            result.put("retreatFee", tempLoan.getRetreatFee());
            result.put("debtorRealityAmount", tempLoan.getDebtorRealityAmount());
        }
        //添加假的计划
        Loan loan = new Loan();
        loan.setOrdercdd(ordercdd);
        loan.setPeriodCode(ordercdd.getProduct().getCapitalproduct().getPeriodCode());
        loan.setPeriodNumber(ordercdd.getProduct().getPeriodNumber());
        loan.setPrincipal(ordercdd.getApplyAmount());
        loan.setDebtorInterest(ordercdd.getProduct().getDebtorInterest());
        loan.setDebtorExtentedRepaymentDays(ordercdd.getProduct().getCapitalproduct().getOverdueGraceDays());
        List<Creditrepayplan> plans = planService.getPlans(loan);
        Map<String, BigDecimal[]> feebackupMap = planService.periodFeebackup(ordercdd.getFeebackups(), loan);
        List<Map<String, Object>> list = new LinkedList<>();
        for (int i = 0; i< plans.size(); i++) {
        	Creditrepayplan plan = plans.get(i);
        	Map<String, Object> planMap = new HashMap<>();
        	Map<String, BigDecimal> subMap = new HashMap<>();
        	for (Map.Entry<String, BigDecimal[]> entry : feebackupMap.entrySet()) {
				subMap.put(entry.getKey(), entry.getValue()[0]);
			}
        	planMap.put("feebackup", subMap);
        	Integer planNumber = Integer.valueOf(plan.getPlanSn().substring(2));
        	planMap.put("planNumber", "第"+planNumber+"期");
        	planMap.put("debtorRepaymentDate", DateFormatUtils.format(plan.getDebtorRepaymentDate(), "yyyy/MM/dd"));
        	planMap.put("fees", plan.getFees());
        	planMap.put("interest", plan.getInterest());
        	planMap.put("principal", plan.getPrincipal());
        	list.add(planMap);
		}
        result.put("plans", list);
        return result;
    }

    /**
     * @Description 订单详情 历史订单、金额、资方/推荐码 客户姓名，推荐人
     * @author jianger
     * @Date 2017/12/19 下午4:07
     **/
    @RequestMapping("/detailOrder")
    public Map<String, Object> getOrderDetails(@RequestParam Integer ordercddId) {
        if (ordercddId == null) {
            throw new FailReturnObject(1, "ordercddId不能为空", Level.ERROR);
        }

        Map<String, Object> map = new HashMap<>();
        Integer orderSize;
        Set<String> captials = new HashSet<>();
        String referralCode;//推荐码
        String referralUser = null;//推荐人
        Integer referralUserId = null;
        String serviceName = null;//客户经理
        Integer serviceId = null;//客户经理
        BigDecimal amountCount = new BigDecimal(0);//实际向客户放款的金额

        Ordercdd ordercdd = repository.findById(ordercddId);

        if (ordercdd == null) {
            throw new FailReturnObject(2, "ordercdd未找到", Level.ERROR);
        }
        Integer userId = ordercdd.getUser().getId();
        if (userId == null) {
            throw new FailReturnObject(1, "userId为空", Level.ERROR);
        }
        referralCode = ordercdd.getReferralCode();
        if (referralCode != null) {
            User user = userRepository.findByReferralCode(referralCode);
            if (user != null && user.getNickname() != null) {
                referralUser = user.getNickname();
                referralUserId = user.getId();
            }
        }

        if (ordercdd.getServiceUser() != null && ordercdd.getServiceUser().getNickname() != null) {
            serviceName = ordercdd.getServiceUser().getNickname();
            serviceId = ordercdd.getServiceUser().getId();
        }

        List<Ordercdd> ordercdds = repository.getOrdercddByUserId(userId);
        orderSize = ordercdds.size();


        for (Ordercdd order : ordercdds) {
            if (order.getLoan() != null) {
                amountCount = amountCount.add(order.getLoan().getDebtorRealityAmount());
            }

//            if (order.getApplyAmount() != null) {
//                amountCount = amountCount.add(order.getApplyAmount());
//            }
            if (order.getProduct() != null && (order.getProduct().getCapitalproduct()) != null && order.getProduct().getCapitalproduct().getCreditorDepartment() != null) {
                captials.add(order.getProduct().getCapitalproduct().getCreditorDepartment().getLabel());
            }

        }
        Map<String, Object> referral = new HashMap<>();
        referral.put("nickname", referralUser);
        referral.put("id", referralUserId);

        Map<String, Object> service = new HashMap<>();
        service.put("servicename", serviceName);
        service.put("serviceid", serviceId);
        //推荐码
        map.put("referralUser", referral);
        map.put("serviceName", service);
        map.put("referralCode", referralCode);
        map.put("amountCount", amountCount);
        map.put("captials", captials);

        map.put("orderSize", orderSize);
        return map;
    }

//    //判断是否有逾期订单
//    private Integer checkOverDues(Ordercdd ordercdd) {
//        Loan loan = loanRepository.getLoanByOrdercddId(ordercdd.getId());
//        BigDecimal sum=new BigDecimal(Double.valueOf(0));
//        //如果没有贷款订单，历史逾期为0
//        if (loan == null) {
//            return 0;
//        }
//
//        Set<Creditrepayment> capitalpayments=creditrepaymentRepository.getCreditrepaymentByOrderSn(ordercdd.getCddSn());
//        for (Creditrepayment c:capitalpayments){
//           sum=sum.add(c.getRealAmount());
//        }
//
//        if(sum.compareTo(ordercdd.getApplyAmount())<0){//实际还款金额小于贷款金额
//            return 1;
//        }
//        return 0;
//
//    }
}
